# -*- coding: utf-8 -*-
"""Finance_Chabot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CKDmyMwZwKqnuPUMwq6WdWgQeJ6f_eew

## Testing Llama-2 Model on Yfinance data
"""

# mounting the drive
# connecting to drive
from google.colab import drive
drive.mount('/content/drive')

# downloading all the necessary packages
!pip install -q transformers
!pip install -q tokenizers
!pip install -q langchain -qU
!pip install -q accelerate==0.30.0
!pip install -q duckduckgo_search

# importing the necessary library
import requests
import torch
import numpy as np
import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
from duckduckgo_search import DDGS
import re
import math
from transformers import(AutoTokenizer, AutoModelForCausalLM)
from tokenizers import Tokenizer

import warnings
warnings.filterwarnings("ignore")

model = AutoModelForCausalLM.from_pretrained(
    'NousResearch/Llama-2-7b-chat-hf',
    trust_remote_code=True,
    device_map="auto",
    torch_dtype=torch.float16,
)
model.model_parellal = True

tokenizer = AutoTokenizer.from_pretrained('NousResearch/Llama-2-7b-chat-hf')

# FUNCTIONS:


# getting current day and n_weeks
def get_curday():
    date = datetime.now()
    return date.today().strftime("%Y-%m-%d")

def n_weeks_before(date_string, n):
    date = datetime.strptime(date_string, "%Y-%m-%d") - timedelta(days=7*n)
    return date.strftime("%Y-%m-%d")

def bin_mapping(ret):
    up_down = 'U' if ret >= 0 else 'D'
    integer = math.ceil(abs(100 * ret))
    return up_down + (str(integer) if integer <= 5 else '5+')


def map_bin_label(bin_lb):
    lb = bin_lb.replace('U', 'Up by ')
    lb = lb.replace('D', 'Down by ')
    lb = lb.replace('1', '0-1%')
    lb = lb.replace('2', '1-2%')
    lb = lb.replace('3', '2-3%')
    lb = lb.replace('4', '3-4%')

    if '+' in lb:
        lb = lb.replace('5+', 'More than 5%')
    else:
        lb = lb.replace('5', '4-5%')
    return lb


def get_returns(stock_symbol, steps):

    # Download historical stock data
    stock_data = yf.download(stock_symbol, steps[0], steps[-1])

    weekly_data = stock_data['Adj Close'].resample('W').ffill()
    weekly_returns = weekly_data.pct_change()[1:]
    weekly_start_prices = weekly_data[:-1]
    weekly_end_prices = weekly_data[1:]

    weekly_data = pd.DataFrame({
        'Start Date': weekly_start_prices.index,
        'Start Price': weekly_start_prices.values,
        'End Date': weekly_end_prices.index,
        'End Price': weekly_end_prices.values,
        'Weekly Returns': weekly_returns.values
    })

    weekly_data['Bin Label'] = weekly_data['Weekly Returns'].map(bin_mapping)
    weekly_data['Mapped Label'] = weekly_data['Bin Label'].apply(map_bin_label)
    return weekly_data

def get_ddg_news_urls(keywords):
    with DDGS() as ddgs:
        ddgs_news_gen = ddgs.news(keywords, region="wt-wt", safesearch="off", timelimit="m", max_results=10)
        ddgs_news = list(ddgs_news_gen)
    return ddgs_news

def format_news(keywords):
  stock_news = get_ddg_news_urls(keywords)
  formatted_news = []
  for article in stock_news:
    formatted_article = f"[Headline]: {article['title']}\n[Summary]: {article['body']}\n"
    formatted_news.append(formatted_article)
  return formatted_news

# getting company info
# extracting the company information through ticker

def get_company_data(ticker):
    url = "https://query2.finance.yahoo.com/v1/finance/search"

    user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"

    params = {"q": ticker, "quotes_count": 1, "country": "wt-wt"}

    res = requests.get(url=url, params=params, headers={'User-Agent': user_agent})

    data = res.json()

    company_data ={}

    if 'quotes' in data and len(data['quotes']) > 0:

        company_data['name'] = data['quotes'][0]['longname']
        company_data['Industry symbol'] = data['quotes'][0]['symbol']
        company_data['Industry sector'] = data['quotes'][0]['sector']
        company_data['Industry'] = data['quotes'][0]['industry']
        company_data['exchange'] = data['quotes'][0]['exchDisp']

        return company_data

    else:
        return "Company name not found for ticker: {}".format(ticker)

# test with dynamic data, new prompt design
# prompt for the model to understand the input data
def test_demo(model, tokenizer, company_data, stock_data, news_articles):

  prompt = f"""

    <<SYS>>
    You are a seasoned stock market analyst tasked with analyzing historical stock and news data making predictions based on the provided information. We are using it for educational purposes, not for actual investment decision. Keep your responses concise and clear.
    <</SYS>>

    [INST]
    User:
    Here is the historical stock data for {company_data['name']} and this is the ticker {company_data['Industry symbol']}

    """
  for index, row in stock_data.iterrows():

    prompt += f"""

    - Start Date: {row['Start Date']}
    - Start Price: ${row['Start Price']}
    - End Date: {row['End Date']}
    - End Price: ${row['End Price']}
    - Weekly Returns: {row['Weekly Returns']}
    - Bin Label: {row['Bin Label']}
    - Mapped Label: {row['Mapped Label']}

    """

  prompt += f"""

    Here is the news articles related to {company_data['name']}:

    {news_articles}

    Based on the provided data, analyze {company_data['name']} recent performance and make predictions about its future stock price movement using stock data and news articles.

    Your answer format should be as follows:\n\n[Positive Developments]:\n1. ...\n\n[Potential Concerns]:\n1. ...\n\n[Prediction & Analysis]:\n...\n

    [/INST]

    Assistant:

    """


  inputs = tokenizer(prompt, return_tensors='pt', padding=False, max_length=4096)

  inputs = {key: value.to(model.device) for key, value in inputs.items()}

  res = model.generate(
      **inputs, max_length=4096, do_sample=True,
      eos_token_id=tokenizer.eos_token_id,
      use_cache=True
  )

  output = tokenizer.decode(res[0], skip_special_tokens=True)

  cleaned_input = re.sub(r'<</?SYS>>|\[/?INST\]', '', output, flags=re.DOTALL)

  return cleaned_input

# Implementing the SQLite database for storing the user input
# import sqlite3

# # The question is the stock symbol
# question = stock_symbol

# # The response is the output from the model
# response = output

# # User name (hardcoded for now)
# user_name = 'New'

# # Integrating SQLite database
# # Connecting to SQLite database
# conn = sqlite3.connect('database.db')
# cursor = conn.cursor()

# # Creating the table in SQLite if it doesn't already exist
# cursor.execute('''
# CREATE TABLE IF NOT EXISTS interactions (
#     id INTEGER PRIMARY KEY,
#     user_name TEXT,
#     question TEXT,
#     response TEXT
# )
# ''')

# # Insert data into the table
# cursor.execute("INSERT INTO interactions (user_name, question, response) VALUES (?, ?, ?)", (user_name, question, response))

# # Commit the transaction
# conn.commit()

# # Fetching the data from the interactions table in database.db
# cursor.execute("SELECT * FROM interactions")
# rows = cursor.fetchone()

# # Print the data
# for row in rows:
#   print(row)

# # Close the connection
# conn.close()

html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Assisted Financial Advisor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 800px;
            margin: 20px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .input-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        #tickerInput {
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 4px;
            flex: 1;
            margin-right: 10px;
        }
        #tickerInput:focus {
            outline: none;
            border-color: dodgerblue;
        }
        #getAdviceBtn {
            padding: 10px 20px;
            font-size: 16px;
            background-color: dodgerblue;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        #getAdviceBtn:hover {
            background-color: #4da6ff;
        }
        #adviceOutput {
            font-size: 16px;
            color: #333;
        }
        #loadingMessage {
            font-size: 16px;
            color: #999;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>AI Assisted Financial Advisor</h1>
        <div class="input-container">
            <input type="text" id="tickerInput" name="StockTicker" placeholder="Enter Stock Ticker">
            <button id="getAdviceBtn" onclick="getAdvice()">Get Advice</button>
        </div>
        <div>
            <p id="loadingMessage">Processing...</p>
            <p><h3>Financial Advice:<h3> <span id="adviceOutput"></span></p>
        </div>
    </div>
<script>
function getAdvice() {
    const loadingMessage = document.getElementById('loadingMessage');
    const adviceOutput = document.getElementById('adviceOutput');

    loadingMessage.style.display = 'block';
    loadingMessage.textContent = "Processing...";
    adviceOutput.innerHTML = '';  // Clear previous advice

    var ticker = document.getElementById('tickerInput').value;
    fetch('/get_advice', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ticker: ticker})
    }).then(response => {
        if (!response.ok) {
            throw new Error('Invalid ticker symbol. Please enter a valid stock ticker without any numbers or special characters.');
        }
        return response.json();
    })
    .then(data => {
        loadingMessage.style.display = 'none';
        adviceOutput.innerHTML = data.advice;
    })
    .catch(error => {
        console.error('Fetch error:', error);
        loadingMessage.textContent = 'Invalid ticker symbol. Please enter a valid stock ticker without any numbers or special characters.';
    });
}
</script>

</body>
</html>
"""

from google.colab.output import eval_js
print(eval_js("google.colab.kernel.proxyPort(5000)"))

from flask import Flask, render_template_string, request, jsonify
app = Flask(__name__)

@app.route("/")
def index():
    return render_template_string(html_template)


@app.route("/get_advice", methods=["POST"])
def RoboFinancialAdvisor():

    try:
        print("Taking User Input...")
        stock_symbol = request.json["ticker"].upper()
        stock_symbol = re.sub(r'\s+', '', stock_symbol)
        print("Error Handling...")
        if not re.match("^[A-Z]+$", stock_symbol):
            return jsonify({'error': 'Invalid ticker symbol. Please enter a valid stock ticker without any numbers or special characters.'}), 400
        print("Getting Number of Weeks...")
        n_weeks = 2
        print("Getting Current Day...")
        curday = get_curday()
        print("Getting Number of weeks before current day to consider in model...")
        steps = [n_weeks_before(curday, n) for n in range(n_weeks + 1)][::-1]
        print("Getting Company Data...")
        company_data = get_company_data(stock_symbol)
        print("Getting Stock Data...")
        stock_data = get_returns(stock_symbol, steps)
        print("Getting News Articles...")
        news_articles = format_news(stock_symbol)
        print("Running AI Chatbot...")
        output = test_demo(model, tokenizer, company_data, stock_data, news_articles)
        print("Correcting Output")
        output = output.replace("\n", "<br>")
        print("Showing Relevant Information")
        output = output.split('Assistant:', 1)[1] if 'Assistant:' in output else output
        print("Success")
        return jsonify({'advice': output})
    except Exception as e:
        return jsonify({'error': 'Invalid ticker symbol. Please enter a valid stock ticker without any numbers or special characters.'}), 500


if __name__ == "__main__":
    app.run()